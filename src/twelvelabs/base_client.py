# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import TwelveLabsEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .engines.client import EnginesClient
from .video_indexing_task.client import VideoIndexingTaskClient
from .indexes.client import IndexesClient
from .manage_videos.client import ManageVideosClient
from .extract_video_data.client import ExtractVideoDataClient
from .text_to_video_search.client import TextToVideoSearchClient
from .classify.client import ClassifyClient
from .generate_text_from_video.client import GenerateTextFromVideoClient
from .create_text_image_and_audio_embeddings.client import (
    CreateTextImageAndAudioEmbeddingsClient,
)
from .create_text_embeddings.client import CreateTextEmbeddingsClient
from .create_video_embeddings.client import CreateVideoEmbeddingsClient
from .any_to_video_search.client import AnyToVideoSearchClient
from .core.client_wrapper import AsyncClientWrapper
from .engines.client import AsyncEnginesClient
from .video_indexing_task.client import AsyncVideoIndexingTaskClient
from .indexes.client import AsyncIndexesClient
from .manage_videos.client import AsyncManageVideosClient
from .extract_video_data.client import AsyncExtractVideoDataClient
from .text_to_video_search.client import AsyncTextToVideoSearchClient
from .classify.client import AsyncClassifyClient
from .generate_text_from_video.client import AsyncGenerateTextFromVideoClient
from .create_text_image_and_audio_embeddings.client import (
    AsyncCreateTextImageAndAudioEmbeddingsClient,
)
from .create_text_embeddings.client import AsyncCreateTextEmbeddingsClient
from .create_video_embeddings.client import AsyncCreateVideoEmbeddingsClient
from .any_to_video_search.client import AsyncAnyToVideoSearchClient


class BaseClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TwelveLabsEnvironment
        The environment to use for requests from the client. from .environment import TwelveLabsEnvironment



        Defaults to TwelveLabsEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from twelvelabs import TwelveLabs

    client = TwelveLabs(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TwelveLabsEnvironment = TwelveLabsEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else None
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.engines = EnginesClient(client_wrapper=self._client_wrapper)
        self.video_indexing_task = VideoIndexingTaskClient(
            client_wrapper=self._client_wrapper
        )
        self.indexes = IndexesClient(client_wrapper=self._client_wrapper)
        self.manage_videos = ManageVideosClient(client_wrapper=self._client_wrapper)
        self.extract_video_data = ExtractVideoDataClient(
            client_wrapper=self._client_wrapper
        )
        self.text_to_video_search = TextToVideoSearchClient(
            client_wrapper=self._client_wrapper
        )
        self.classify = ClassifyClient(client_wrapper=self._client_wrapper)
        self.generate_text_from_video = GenerateTextFromVideoClient(
            client_wrapper=self._client_wrapper
        )
        self.create_text_image_and_audio_embeddings = (
            CreateTextImageAndAudioEmbeddingsClient(client_wrapper=self._client_wrapper)
        )
        self.create_text_embeddings = CreateTextEmbeddingsClient(
            client_wrapper=self._client_wrapper
        )
        self.create_video_embeddings = CreateVideoEmbeddingsClient(
            client_wrapper=self._client_wrapper
        )
        self.any_to_video_search = AnyToVideoSearchClient(
            client_wrapper=self._client_wrapper
        )


class AsyncBaseClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TwelveLabsEnvironment
        The environment to use for requests from the client. from .environment import TwelveLabsEnvironment



        Defaults to TwelveLabsEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from twelvelabs import AsyncTwelveLabs

    client = AsyncTwelveLabs(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TwelveLabsEnvironment = TwelveLabsEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else None
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.engines = AsyncEnginesClient(client_wrapper=self._client_wrapper)
        self.video_indexing_task = AsyncVideoIndexingTaskClient(
            client_wrapper=self._client_wrapper
        )
        self.indexes = AsyncIndexesClient(client_wrapper=self._client_wrapper)
        self.manage_videos = AsyncManageVideosClient(
            client_wrapper=self._client_wrapper
        )
        self.extract_video_data = AsyncExtractVideoDataClient(
            client_wrapper=self._client_wrapper
        )
        self.text_to_video_search = AsyncTextToVideoSearchClient(
            client_wrapper=self._client_wrapper
        )
        self.classify = AsyncClassifyClient(client_wrapper=self._client_wrapper)
        self.generate_text_from_video = AsyncGenerateTextFromVideoClient(
            client_wrapper=self._client_wrapper
        )
        self.create_text_image_and_audio_embeddings = (
            AsyncCreateTextImageAndAudioEmbeddingsClient(
                client_wrapper=self._client_wrapper
            )
        )
        self.create_text_embeddings = AsyncCreateTextEmbeddingsClient(
            client_wrapper=self._client_wrapper
        )
        self.create_video_embeddings = AsyncCreateVideoEmbeddingsClient(
            client_wrapper=self._client_wrapper
        )
        self.any_to_video_search = AsyncAnyToVideoSearchClient(
            client_wrapper=self._client_wrapper
        )


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: TwelveLabsEnvironment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception(
            "Please pass in either base_url or environment to construct the client"
        )
