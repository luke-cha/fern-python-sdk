# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .classify_video_response_data_item_classes_item_clips_item import (
    ClassifyVideoResponseDataItemClassesItemClipsItem,
)
from .classify_video_response_data_item_classes_item_detailed_scores import (
    ClassifyVideoResponseDataItemClassesItemDetailedScores,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ClassifyVideoResponseDataItemClassesItem(UniversalBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the class.
    """

    score: typing.Optional[float] = pydantic.Field(default=None)
    """
    A number indicating the confidence level that the entire video matches the specified class.
    """

    duration_ratio: typing.Optional[float] = pydantic.Field(default=None)
    """
    A number indicating the sum of the lengths of the matching video clips inside a video divided by the total length of the video.
    """

    clips: typing.Optional[
        typing.List[ClassifyVideoResponseDataItemClassesItemClipsItem]
    ] = pydantic.Field(default=None)
    """
    An array containing details information about the video clips that match the prompts you've specified. The platform returns this array when you set the value of the `include_clips` parameter to `true` in the body of the request.
    """

    detailed_scores: typing.Optional[
        ClassifyVideoResponseDataItemClassesItemDetailedScores
    ] = pydantic.Field(default=None)
    """
    When you set the value of the `show_detailed_score` parameter to `true` in the body of the request, the platform returns detailed information that helps you determine the likelihood that this video clip matches your prompts.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
