# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.create_text_embeddings_create_text_enbedding_response import (
    CreateTextEmbeddingsCreateTextEnbeddingResponse,
)
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CreateTextEmbeddingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_text_enbedding(
        self,
        *,
        engine_name: str,
        text: str,
        text_truncate: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTextEmbeddingsCreateTextEnbeddingResponse:
        """
        This endpoint creates text embeddings.

        Parameters
        ----------
        engine_name : str
            The name of the engine you want to use. The following engines are available:
              - `Marengo-retrieval-2.6`


        text : str
            The text for which you want to create an embedding.

            **NOTE**:
            Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.

            **Example**: "Man with a dog crossing the street"


        text_truncate : typing.Optional[str]
            Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
            This parameter can take one of the following values:
              - `start`: The platform will truncate the start of the provided text.
              - `end`: The platform will truncate the end of the provided text.
              - `none`: The platform will return an error if the text is longer than the maximum token limit.

              **Default**: `end`


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTextEmbeddingsCreateTextEnbeddingResponse
            A text embedding has successfully been created.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.create_text_embeddings.create_text_enbedding(
            engine_name="engine_name",
            text="text",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "embed",
            method="POST",
            data={
                "engine_name": engine_name,
                "text": text,
                "text_truncate": text_truncate,
            },
            files={},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateTextEmbeddingsCreateTextEnbeddingResponse,
                    parse_obj_as(
                        type_=CreateTextEmbeddingsCreateTextEnbeddingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCreateTextEmbeddingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_text_enbedding(
        self,
        *,
        engine_name: str,
        text: str,
        text_truncate: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTextEmbeddingsCreateTextEnbeddingResponse:
        """
        This endpoint creates text embeddings.

        Parameters
        ----------
        engine_name : str
            The name of the engine you want to use. The following engines are available:
              - `Marengo-retrieval-2.6`


        text : str
            The text for which you want to create an embedding.

            **NOTE**:
            Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.

            **Example**: "Man with a dog crossing the street"


        text_truncate : typing.Optional[str]
            Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
            This parameter can take one of the following values:
              - `start`: The platform will truncate the start of the provided text.
              - `end`: The platform will truncate the end of the provided text.
              - `none`: The platform will return an error if the text is longer than the maximum token limit.

              **Default**: `end`


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTextEmbeddingsCreateTextEnbeddingResponse
            A text embedding has successfully been created.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_text_embeddings.create_text_enbedding(
                engine_name="engine_name",
                text="text",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "embed",
            method="POST",
            data={
                "engine_name": engine_name,
                "text": text,
                "text_truncate": text_truncate,
            },
            files={},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateTextEmbeddingsCreateTextEnbeddingResponse,
                    parse_obj_as(
                        type_=CreateTextEmbeddingsCreateTextEnbeddingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
