# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.create_video_embeddings_list_video_embedding_tasks_response import (
    CreateVideoEmbeddingsListVideoEmbeddingTasksResponse,
)
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .. import core
from .types.create_video_embeddings_create_video_embeding_task_response import (
    CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse,
)
from .types.create_video_embeddings_retrieve_video_embeding_task_response import (
    CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse,
)
from ..core.jsonable_encoder import jsonable_encoder
from .types.create_video_embeddings_retrieve_video_embeding_response import (
    CreateVideoEmbeddingsRetrieveVideoEmbedingResponse,
)
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CreateVideoEmbeddingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_video_embedding_tasks(
        self,
        *,
        started_at: typing.Optional[str] = None,
        ended_at: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVideoEmbeddingsListVideoEmbeddingTasksResponse:
        """
        This method returns a list of the video embedding tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.

        Parameters
        ----------
        started_at : typing.Optional[str]
            Retrieve the video embedding tasks created after a specific time. When specifying the time, use the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").

        ended_at : typing.Optional[str]
            Retrieve the video embedding tasks created after a specific time. When specifying the time, use the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").

        status : typing.Optional[str]
            Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`.

        page : typing.Optional[int]
            A number that identifies the page to retrieve.

            **Default**: `1`.

        page_limit : typing.Optional[int]
            The number of items to return on each page.

            **Default**: `10`.
            **Max**: `50`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsListVideoEmbeddingTasksResponse
            A list of video embedding tasks has successfully been retrieved.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.create_video_embeddings.list_video_embedding_tasks()
        """
        _response = self._client_wrapper.httpx_client.request(
            "embed/tasks",
            method="GET",
            params={
                "started_at": started_at,
                "ended_at": ended_at,
                "status": status,
                "page": page,
                "page_limit": page_limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsListVideoEmbeddingTasksResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsListVideoEmbeddingTasksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_video_embeding_task(
        self,
        *,
        engine_name: str,
        video_file: typing.Optional[core.File] = OMIT,
        video_url: typing.Optional[str] = OMIT,
        video_start_offset_sec: typing.Optional[float] = OMIT,
        video_end_offset_sec: typing.Optional[float] = OMIT,
        video_clip_length: typing.Optional[float] = OMIT,
        video_embedding_scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse:
        """
        This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings. Video embeddings are stored for seven days and are deleted after the 7-day retention period.
        
        Note the following about using this endpoint:
        
        - To upload a file that resides on the local file system, pass the video_file parameter. It must be a stream of bytes encoded as `multipart/form-data`.
        - To upload a file from a publicly accessible URL, pass the `video_url` parameter with the URL of your video. It must be a string.
        - You must specify at least one of the `video_file` and `video_url` parameters. If you specify both the `video_url` and `video_file` parameters in the same request, the `video_url` parameter takes precedence over `video_file`.
        
        The videos for which you wish to generate embeddings must meet the requirements in the [Prerequisites](/docs/create-video-embeddings#prerequisites) section of the **Create video embeddings** page.
        **NOTE**: The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
        
        Parameters
        ----------
        engine_name : str
            The name of the engine you want to use. The following engines are available:
              - `Marengo-retrieval-2.6`
            
        
        video_file : typing.Optional[core.File]
            See core.File for more documentation
        
        video_url : typing.Optional[str]
            Specify this parameter to upload a video from a publicly accessible URL.
            
        
        video_start_offset_sec : typing.Optional[float]
            The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.
            
            **Default**: 0
            **Min**: 0
            **Max**: Duration of the video minus 6
            
        
        video_end_offset_sec : typing.Optional[float]
            The end offset in seconds from the beginning of the video where processing should stop.
            
            Ensure the following when you specify this parameter:
            - The end offset does not exceed the total duration of the video file.
            - The end offset is greater than the start offset.
            - You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.
            
            **Min**: video_start_offset + 6
            **Max**: Duration of the video file
            
        
        video_clip_length : typing.Optional[float]
            The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.
            
            **Default**: 6
            **Min**: 2
            **Max**: 10
            
        
        video_embedding_scope : typing.Optional[str]
            Defines the scope of the video embedding generation. You can specify one or both of the following values:
            - `clip`: Use this value to create embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.
            - `video`: Use this value to create an embedding for the entire video.
            
            To create both embeddings for specific video segments and for the entire video, include this parameter twice in the request as shown below:
            
            ```json
            --form video_embedding_scope=clip \
            --form video_embedding_scope=video
            ```
            
            **Default**: `clip`
            
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse
            A video embedding task has successfully been created.
            
        
        Examples
        --------
        from twelvelabs import TwelveLabs
        
        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.create_video_embeddings.create_video_embeding_task(
            engine_name="engine_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "embed/tasks",
            method="POST",
            data={
                "engine_name": engine_name,
                "video_url": video_url,
                "video_start_offset_sec": video_start_offset_sec,
                "video_end_offset_sec": video_end_offset_sec,
                "video_clip_length": video_clip_length,
                "video_embedding_scope": video_embedding_scope,
            },
            files={
                "video_file": video_file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_video_embeding_task(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse:
        """
        This method retrieves the status of a video embedding task.

        Each video embedding task represents a request to upload and create one or multiple embeddings. A task starts when you begin uploading a video by calling the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint, and can have one of the following statuses:

        - `processing`: This status indicates that the embeddings are being created.
        - `ready`: This status indicates that the platform has finished processing your video, and you can retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embeding) method on the `/embed/tasks/{task_id} endpoint`.
        - `failed`: This status indicates that the task could not be completed as expected, and the embeddings haven't been created.

        Parameters
        ----------
        task_id : str
            The unique identifier of your video embedding task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse
            The status of your video embedding task has been retrieved.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.create_video_embeddings.retrieve_video_embeding_task(
            task_id="task_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"embed/tasks/{jsonable_encoder(task_id)}/status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_video_embeding(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateVideoEmbeddingsRetrieveVideoEmbedingResponse:
        """
        This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embeding-task) task page for instructions on checking the task status.

        Parameters
        ----------
        task_id : str
            The unique identifier of your video embedding task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsRetrieveVideoEmbedingResponse
            Video embeddings have successfully been retrieved.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.create_video_embeddings.retrieve_video_embeding(
            task_id="task_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"embed/tasks/{jsonable_encoder(task_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsRetrieveVideoEmbedingResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsRetrieveVideoEmbedingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCreateVideoEmbeddingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_video_embedding_tasks(
        self,
        *,
        started_at: typing.Optional[str] = None,
        ended_at: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVideoEmbeddingsListVideoEmbeddingTasksResponse:
        """
        This method returns a list of the video embedding tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.

        Parameters
        ----------
        started_at : typing.Optional[str]
            Retrieve the video embedding tasks created after a specific time. When specifying the time, use the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").

        ended_at : typing.Optional[str]
            Retrieve the video embedding tasks created after a specific time. When specifying the time, use the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").

        status : typing.Optional[str]
            Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`.

        page : typing.Optional[int]
            A number that identifies the page to retrieve.

            **Default**: `1`.

        page_limit : typing.Optional[int]
            The number of items to return on each page.

            **Default**: `10`.
            **Max**: `50`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsListVideoEmbeddingTasksResponse
            A list of video embedding tasks has successfully been retrieved.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_video_embeddings.list_video_embedding_tasks()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "embed/tasks",
            method="GET",
            params={
                "started_at": started_at,
                "ended_at": ended_at,
                "status": status,
                "page": page,
                "page_limit": page_limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsListVideoEmbeddingTasksResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsListVideoEmbeddingTasksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_video_embeding_task(
        self,
        *,
        engine_name: str,
        video_file: typing.Optional[core.File] = OMIT,
        video_url: typing.Optional[str] = OMIT,
        video_start_offset_sec: typing.Optional[float] = OMIT,
        video_end_offset_sec: typing.Optional[float] = OMIT,
        video_clip_length: typing.Optional[float] = OMIT,
        video_embedding_scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse:
        """
        This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings. Video embeddings are stored for seven days and are deleted after the 7-day retention period.
        
        Note the following about using this endpoint:
        
        - To upload a file that resides on the local file system, pass the video_file parameter. It must be a stream of bytes encoded as `multipart/form-data`.
        - To upload a file from a publicly accessible URL, pass the `video_url` parameter with the URL of your video. It must be a string.
        - You must specify at least one of the `video_file` and `video_url` parameters. If you specify both the `video_url` and `video_file` parameters in the same request, the `video_url` parameter takes precedence over `video_file`.
        
        The videos for which you wish to generate embeddings must meet the requirements in the [Prerequisites](/docs/create-video-embeddings#prerequisites) section of the **Create video embeddings** page.
        **NOTE**: The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
        
        Parameters
        ----------
        engine_name : str
            The name of the engine you want to use. The following engines are available:
              - `Marengo-retrieval-2.6`
            
        
        video_file : typing.Optional[core.File]
            See core.File for more documentation
        
        video_url : typing.Optional[str]
            Specify this parameter to upload a video from a publicly accessible URL.
            
        
        video_start_offset_sec : typing.Optional[float]
            The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.
            
            **Default**: 0
            **Min**: 0
            **Max**: Duration of the video minus 6
            
        
        video_end_offset_sec : typing.Optional[float]
            The end offset in seconds from the beginning of the video where processing should stop.
            
            Ensure the following when you specify this parameter:
            - The end offset does not exceed the total duration of the video file.
            - The end offset is greater than the start offset.
            - You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.
            
            **Min**: video_start_offset + 6
            **Max**: Duration of the video file
            
        
        video_clip_length : typing.Optional[float]
            The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.
            
            **Default**: 6
            **Min**: 2
            **Max**: 10
            
        
        video_embedding_scope : typing.Optional[str]
            Defines the scope of the video embedding generation. You can specify one or both of the following values:
            - `clip`: Use this value to create embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.
            - `video`: Use this value to create an embedding for the entire video.
            
            To create both embeddings for specific video segments and for the entire video, include this parameter twice in the request as shown below:
            
            ```json
            --form video_embedding_scope=clip \
            --form video_embedding_scope=video
            ```
            
            **Default**: `clip`
            
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse
            A video embedding task has successfully been created.
            
        
        Examples
        --------
        import asyncio
        
        from twelvelabs import AsyncTwelveLabs
        
        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )
        
        
        async def main() -> None:
            await client.create_video_embeddings.create_video_embeding_task(
                engine_name="engine_name",
            )
        
        
        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "embed/tasks",
            method="POST",
            data={
                "engine_name": engine_name,
                "video_url": video_url,
                "video_start_offset_sec": video_start_offset_sec,
                "video_end_offset_sec": video_end_offset_sec,
                "video_clip_length": video_clip_length,
                "video_embedding_scope": video_embedding_scope,
            },
            files={
                "video_file": video_file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsCreateVideoEmbedingTaskResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_video_embeding_task(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse:
        """
        This method retrieves the status of a video embedding task.

        Each video embedding task represents a request to upload and create one or multiple embeddings. A task starts when you begin uploading a video by calling the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint, and can have one of the following statuses:

        - `processing`: This status indicates that the embeddings are being created.
        - `ready`: This status indicates that the platform has finished processing your video, and you can retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embeding) method on the `/embed/tasks/{task_id} endpoint`.
        - `failed`: This status indicates that the task could not be completed as expected, and the embeddings haven't been created.

        Parameters
        ----------
        task_id : str
            The unique identifier of your video embedding task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse
            The status of your video embedding task has been retrieved.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_video_embeddings.retrieve_video_embeding_task(
                task_id="task_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"embed/tasks/{jsonable_encoder(task_id)}/status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsRetrieveVideoEmbedingTaskResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_video_embeding(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateVideoEmbeddingsRetrieveVideoEmbedingResponse:
        """
        This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embeding-task) task page for instructions on checking the task status.

        Parameters
        ----------
        task_id : str
            The unique identifier of your video embedding task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVideoEmbeddingsRetrieveVideoEmbedingResponse
            Video embeddings have successfully been retrieved.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_video_embeddings.retrieve_video_embeding(
                task_id="task_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"embed/tasks/{jsonable_encoder(task_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateVideoEmbeddingsRetrieveVideoEmbedingResponse,
                    parse_obj_as(
                        type_=CreateVideoEmbeddingsRetrieveVideoEmbedingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
