# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from .types.engines_list_response import EnginesListResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.engine import Engine
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.not_found_error import NotFoundError
from ..types.not_found_error_body import NotFoundErrorBody
from ..core.client_wrapper import AsyncClientWrapper


class EnginesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EnginesListResponse:
        """
        This method lists all the engines that are available in your account.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EnginesListResponse
            The engines have successfully been retrieved.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.engines.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "engines",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EnginesListResponse,
                    parse_obj_as(
                        type_=EnginesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self, engine_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Engine:
        """
        This method retrieves an engine.

        Parameters
        ----------
        engine_id : str
            The identifier of the engine to retrieve. The following engines are available:

            - **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

              - `marengo2.6`

            - **Generative**: These engines generate text based on your videos.

              - `pegasus1.1`

            For details about the features of each engine, see the [Video understanding engines](/docs/video-understanding-engines) page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Engine
            The specified engine has successfully been retrieved

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.engines.retrieve(
            engine_id="marengo2.6",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"engines/{jsonable_encoder(engine_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Engine,
                    parse_obj_as(
                        type_=Engine,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        parse_obj_as(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEnginesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EnginesListResponse:
        """
        This method lists all the engines that are available in your account.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EnginesListResponse
            The engines have successfully been retrieved.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.engines.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "engines",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EnginesListResponse,
                    parse_obj_as(
                        type_=EnginesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self, engine_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Engine:
        """
        This method retrieves an engine.

        Parameters
        ----------
        engine_id : str
            The identifier of the engine to retrieve. The following engines are available:

            - **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

              - `marengo2.6`

            - **Generative**: These engines generate text based on your videos.

              - `pegasus1.1`

            For details about the features of each engine, see the [Video understanding engines](/docs/video-understanding-engines) page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Engine
            The specified engine has successfully been retrieved

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.engines.retrieve(
                engine_id="marengo2.6",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"engines/{jsonable_encoder(engine_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Engine,
                    parse_obj_as(
                        type_=Engine,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        parse_obj_as(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
