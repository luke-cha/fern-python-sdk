# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.generate_text_from_video_generate_gist_request_types_item import (
    GenerateTextFromVideoGenerateGistRequestTypesItem,
)
from ..core.request_options import RequestOptions
from .types.generate_text_from_video_generate_gist_response import (
    GenerateTextFromVideoGenerateGistResponse,
)
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.too_many_requests_error import TooManyRequestsError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.generate_text_from_video_summarize_response import (
    GenerateTextFromVideoSummarizeResponse,
)
from .types.generate_text_from_video_generate_text_representation_response import (
    GenerateTextFromVideoGenerateTextRepresentationResponse,
)
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GenerateTextFromVideoClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate_gist(
        self,
        *,
        video_id: str,
        types: typing.Sequence[GenerateTextFromVideoGenerateGistRequestTypesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoGenerateGistResponse:
        """
        This endpoint generates concise overviews in the form of titles, topics, and hashtags representing the key elements or themes of a video.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video for which you want to generate a gist.


        types : typing.Sequence[GenerateTextFromVideoGenerateGistRequestTypesItem]
            An array specifying the type of text the platform must generate. Use one or more of the following values:

              - `topic`: A topic is the central theme of a video, such as "Shopping Vlog Lifestyle", summarizing its content for efficient categorization and reference.

              - `hashtag`: A hashtag, like "#BlackFriday", represents key themes in a video, enhancing its discoverability and categorization on social media platforms.

              - `title`: A title succinctly captures a video's main theme, such as "From Consumerism to Minimalism: A Journey Toward Sustainable Living," guiding viewers to its content and themes.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoGenerateGistResponse
            The gist has successfully been generated.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.generate_text_from_video.generate_gist(
            video_id="video_id",
            types=["topic"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "gist",
            method="POST",
            json={
                "video_id": video_id,
                "types": types,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoGenerateGistResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoGenerateGistResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def summarize(
        self,
        *,
        video_id: str,
        type: str,
        prompt: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoSummarizeResponse:
        """
        This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video that you want to summarize.


        type : str
            Specifies the type of summary. Use one of the following values:
              - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.
              - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.
              - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.


        prompt : typing.Optional[str]
            Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.

            **NOTES**:
              - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
              - The maximum length of a prompt is 1500 characters.

            **Example**: Generate a summary of this video for a social media post, up to two sentences.


        temperature : typing.Optional[float]
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.7
            **Min:** 0
            **Max:** 1


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoSummarizeResponse
            The specified video has successfully been summarized.


        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.generate_text_from_video.summarize(
            video_id="video_id",
            type="type",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "summarize",
            method="POST",
            json={
                "video_id": video_id,
                "type": type,
                "prompt": prompt,
                "temperature": temperature,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoSummarizeResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoSummarizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def generate_text_representation(
        self,
        *,
        video_id: str,
        prompt: str,
        temperature: typing.Optional[float] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoGenerateTextRepresentationResponse:
        """
        This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.

        **NOTES**:

        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video for which you wish to generate a text.

        prompt : str
            A prompt that guides the model on the desired format or content.

            **NOTES**:
              - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.
              - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
              - The maximum length of a prompt is 1500 characters.

            **Examples**:

              - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).
              - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.


        temperature : typing.Optional[float]
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.7
            **Min:** 0
            **Max:** 1


        stream : typing.Optional[bool]
            Set this parameter to `true` to enable streaming responses in the <a href="https://github.com/ndjson/ndjson-spec" target="_blank">NDJSON</a> format.

            **Default:** `false`


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoGenerateTextRepresentationResponse
            The specified video has successfully been processed.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.generate_text_from_video.generate_text_representation(
            video_id="video_id",
            prompt="prompt",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "video_id": video_id,
                "prompt": prompt,
                "temperature": temperature,
                "stream": stream,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoGenerateTextRepresentationResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoGenerateTextRepresentationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGenerateTextFromVideoClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate_gist(
        self,
        *,
        video_id: str,
        types: typing.Sequence[GenerateTextFromVideoGenerateGistRequestTypesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoGenerateGistResponse:
        """
        This endpoint generates concise overviews in the form of titles, topics, and hashtags representing the key elements or themes of a video.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video for which you want to generate a gist.


        types : typing.Sequence[GenerateTextFromVideoGenerateGistRequestTypesItem]
            An array specifying the type of text the platform must generate. Use one or more of the following values:

              - `topic`: A topic is the central theme of a video, such as "Shopping Vlog Lifestyle", summarizing its content for efficient categorization and reference.

              - `hashtag`: A hashtag, like "#BlackFriday", represents key themes in a video, enhancing its discoverability and categorization on social media platforms.

              - `title`: A title succinctly captures a video's main theme, such as "From Consumerism to Minimalism: A Journey Toward Sustainable Living," guiding viewers to its content and themes.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoGenerateGistResponse
            The gist has successfully been generated.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate_text_from_video.generate_gist(
                video_id="video_id",
                types=["topic"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "gist",
            method="POST",
            json={
                "video_id": video_id,
                "types": types,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoGenerateGistResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoGenerateGistResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def summarize(
        self,
        *,
        video_id: str,
        type: str,
        prompt: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoSummarizeResponse:
        """
        This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video that you want to summarize.


        type : str
            Specifies the type of summary. Use one of the following values:
              - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.
              - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.
              - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.


        prompt : typing.Optional[str]
            Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.

            **NOTES**:
              - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
              - The maximum length of a prompt is 1500 characters.

            **Example**: Generate a summary of this video for a social media post, up to two sentences.


        temperature : typing.Optional[float]
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.7
            **Min:** 0
            **Max:** 1


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoSummarizeResponse
            The specified video has successfully been summarized.


        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate_text_from_video.summarize(
                video_id="video_id",
                type="type",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "summarize",
            method="POST",
            json={
                "video_id": video_id,
                "type": type,
                "prompt": prompt,
                "temperature": temperature,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoSummarizeResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoSummarizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def generate_text_representation(
        self,
        *,
        video_id: str,
        prompt: str,
        temperature: typing.Optional[float] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateTextFromVideoGenerateTextRepresentationResponse:
        """
        This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.

        **NOTES**:

        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.

        Parameters
        ----------
        video_id : str
            The unique identifier of the video for which you wish to generate a text.

        prompt : str
            A prompt that guides the model on the desired format or content.

            **NOTES**:
              - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.
              - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
              - The maximum length of a prompt is 1500 characters.

            **Examples**:

              - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).
              - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.


        temperature : typing.Optional[float]
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.7
            **Min:** 0
            **Max:** 1


        stream : typing.Optional[bool]
            Set this parameter to `true` to enable streaming responses in the <a href="https://github.com/ndjson/ndjson-spec" target="_blank">NDJSON</a> format.

            **Default:** `false`


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTextFromVideoGenerateTextRepresentationResponse
            The specified video has successfully been processed.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate_text_from_video.generate_text_representation(
                video_id="video_id",
                prompt="prompt",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "video_id": video_id,
                "prompt": prompt,
                "temperature": temperature,
                "stream": stream,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GenerateTextFromVideoGenerateTextRepresentationResponse,
                    parse_obj_as(
                        type_=GenerateTextFromVideoGenerateTextRepresentationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
