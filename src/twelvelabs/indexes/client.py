# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.indexes_list_response import IndexesListResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.indexes_create_request_engines_item import IndexesCreateRequestEnginesItem
from .types.indexes_create_response import IndexesCreateResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.indexes_retrieve_response import IndexesRetrieveResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IndexesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        page_limit: typing.Optional[int] = None,
        sort_by: typing.Optional[str] = None,
        sort_option: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        index_name: typing.Optional[str] = None,
        engine_options: typing.Optional[str] = None,
        engine_family: typing.Optional[str] = None,
        index_options: typing.Optional[str] = None,
        created_at: typing.Optional[str] = None,
        updated_at: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IndexesListResponse:
        """
        This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.

        Parameters
        ----------
        page : typing.Optional[int]
            A number that identifies the page to retrieve.

            **Default**: `1`.

        page_limit : typing.Optional[int]
            The number of items to return on each page.

            **Default**: `10`.
            **Max**: `50`.

        sort_by : typing.Optional[str]
            The field to sort on. The following options are available:

            - `updated_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was updated.
            - `created_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was created.

            **Default**: `created_at`.

        sort_option : typing.Optional[str]
            The sorting direction. The following options are available:

            - `asc`
            - `desc`

            **Default**: `desc`.

        id : typing.Optional[str]
            Filter by the unique identifier of an index.

        index_name : typing.Optional[str]
            Filter by the name of an index.

        engine_options : typing.Optional[str]
            Filter by the engine options. When filtering by multiple engine options, the values must be comma-separated.

        engine_family : typing.Optional[str]
            Filter by the engine family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.

        index_options : typing.Optional[str]
            Filter by the indexing options. When filtering by multiple indexing options, the values must be comma-separated.

            **NOTE:** This parameter is supported for backward compatibility and will be deprecated in a future release. Instead, use `engine_options` or `engine_family`.

        created_at : typing.Optional[str]
            Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were created on the specified date at or after the given time.

        updated_at : typing.Optional[str]
            Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were last updated on the specified date at or after the given time.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesListResponse
            The indexes have successfully been retrieved.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.indexes.list(
            engine_options="engine_options=visual,conversation",
            index_options="index_options=visual,conversation",
            created_at="2024-08-16T16:53:59Z",
            updated_at="2024-08-16T16:55:59Z",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "indexes",
            method="GET",
            params={
                "page": page,
                "page_limit": page_limit,
                "sort_by": sort_by,
                "sort_option": sort_option,
                "_id": id,
                "index_name": index_name,
                "engine_options": engine_options,
                "engine_family": engine_family,
                "index_options": index_options,
                "created_at": created_at,
                "updated_at": updated_at,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesListResponse,
                    parse_obj_as(
                        type_=IndexesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        index_name: str,
        engines: typing.Sequence[IndexesCreateRequestEnginesItem],
        addons: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IndexesCreateResponse:
        """
        This method creates an index.

        Parameters
        ----------
        index_name : str
            The name of the index. Make sure you use a succinct and descriptive name.


        engines : typing.Sequence[IndexesCreateRequestEnginesItem]
            An array that specifies the [video understanding engines](/docs/video-understanding-engines) and the [engine options](/docs/engine-options) to be enabled for this index. This determines how the platform processes your videos.


        addons : typing.Optional[typing.Sequence[str]]
            An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:
            - `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).

            If you don't provide this parameter, no add-ons will be enabled.

            **NOTES:**
              - You can only enable addons when using the Marengo video understanding engine.
              - You cannot disable an add-on once the index has been created.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesCreateResponse
            An index has successfully been created

        Examples
        --------
        from twelvelabs import TwelveLabs
        from twelvelabs.indexes import IndexesCreateRequestEnginesItem

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.indexes.create(
            index_name="myIndex",
            engines=[
                IndexesCreateRequestEnginesItem(
                    engine_name="marengo2.6",
                    engine_options=["visual", "conversation", "text_in_video", "logo"],
                ),
                IndexesCreateRequestEnginesItem(
                    engine_name="pagasus1.0",
                    engine_options=["visual", "conversation"],
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "indexes",
            method="POST",
            json={
                "index_name": index_name,
                "engines": convert_and_respect_annotation_metadata(
                    object_=engines,
                    annotation=typing.Sequence[IndexesCreateRequestEnginesItem],
                    direction="write",
                ),
                "addons": addons,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesCreateResponse,
                    parse_obj_as(
                        type_=IndexesCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self, index_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> IndexesRetrieveResponse:
        """
        This method retrieves details about the specified index.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesRetrieveResponse
            The specified index has successfully been retrieved.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.indexes.retrieve(
            index_id="index-id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesRetrieveResponse,
                    parse_obj_as(
                        type_=IndexesRetrieveResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        index_id: str,
        *,
        index_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        This method updates the name of the specified index.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to update.

        index_name : str
            The name of the index.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.indexes.update(
            index_id="index-id",
            index_name="index_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="PUT",
            json={
                "index_name": index_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, index_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        This method deletes the specified index and all the videos within it. This action cannot be undone.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.indexes.delete(
            index_id="index-id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIndexesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        page_limit: typing.Optional[int] = None,
        sort_by: typing.Optional[str] = None,
        sort_option: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        index_name: typing.Optional[str] = None,
        engine_options: typing.Optional[str] = None,
        engine_family: typing.Optional[str] = None,
        index_options: typing.Optional[str] = None,
        created_at: typing.Optional[str] = None,
        updated_at: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IndexesListResponse:
        """
        This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.

        Parameters
        ----------
        page : typing.Optional[int]
            A number that identifies the page to retrieve.

            **Default**: `1`.

        page_limit : typing.Optional[int]
            The number of items to return on each page.

            **Default**: `10`.
            **Max**: `50`.

        sort_by : typing.Optional[str]
            The field to sort on. The following options are available:

            - `updated_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was updated.
            - `created_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was created.

            **Default**: `created_at`.

        sort_option : typing.Optional[str]
            The sorting direction. The following options are available:

            - `asc`
            - `desc`

            **Default**: `desc`.

        id : typing.Optional[str]
            Filter by the unique identifier of an index.

        index_name : typing.Optional[str]
            Filter by the name of an index.

        engine_options : typing.Optional[str]
            Filter by the engine options. When filtering by multiple engine options, the values must be comma-separated.

        engine_family : typing.Optional[str]
            Filter by the engine family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.

        index_options : typing.Optional[str]
            Filter by the indexing options. When filtering by multiple indexing options, the values must be comma-separated.

            **NOTE:** This parameter is supported for backward compatibility and will be deprecated in a future release. Instead, use `engine_options` or `engine_family`.

        created_at : typing.Optional[str]
            Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were created on the specified date at or after the given time.

        updated_at : typing.Optional[str]
            Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were last updated on the specified date at or after the given time.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesListResponse
            The indexes have successfully been retrieved.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.indexes.list(
                engine_options="engine_options=visual,conversation",
                index_options="index_options=visual,conversation",
                created_at="2024-08-16T16:53:59Z",
                updated_at="2024-08-16T16:55:59Z",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "indexes",
            method="GET",
            params={
                "page": page,
                "page_limit": page_limit,
                "sort_by": sort_by,
                "sort_option": sort_option,
                "_id": id,
                "index_name": index_name,
                "engine_options": engine_options,
                "engine_family": engine_family,
                "index_options": index_options,
                "created_at": created_at,
                "updated_at": updated_at,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesListResponse,
                    parse_obj_as(
                        type_=IndexesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        index_name: str,
        engines: typing.Sequence[IndexesCreateRequestEnginesItem],
        addons: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IndexesCreateResponse:
        """
        This method creates an index.

        Parameters
        ----------
        index_name : str
            The name of the index. Make sure you use a succinct and descriptive name.


        engines : typing.Sequence[IndexesCreateRequestEnginesItem]
            An array that specifies the [video understanding engines](/docs/video-understanding-engines) and the [engine options](/docs/engine-options) to be enabled for this index. This determines how the platform processes your videos.


        addons : typing.Optional[typing.Sequence[str]]
            An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:
            - `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).

            If you don't provide this parameter, no add-ons will be enabled.

            **NOTES:**
              - You can only enable addons when using the Marengo video understanding engine.
              - You cannot disable an add-on once the index has been created.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesCreateResponse
            An index has successfully been created

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs
        from twelvelabs.indexes import IndexesCreateRequestEnginesItem

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.indexes.create(
                index_name="myIndex",
                engines=[
                    IndexesCreateRequestEnginesItem(
                        engine_name="marengo2.6",
                        engine_options=[
                            "visual",
                            "conversation",
                            "text_in_video",
                            "logo",
                        ],
                    ),
                    IndexesCreateRequestEnginesItem(
                        engine_name="pagasus1.0",
                        engine_options=["visual", "conversation"],
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "indexes",
            method="POST",
            json={
                "index_name": index_name,
                "engines": convert_and_respect_annotation_metadata(
                    object_=engines,
                    annotation=typing.Sequence[IndexesCreateRequestEnginesItem],
                    direction="write",
                ),
                "addons": addons,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesCreateResponse,
                    parse_obj_as(
                        type_=IndexesCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self, index_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> IndexesRetrieveResponse:
        """
        This method retrieves details about the specified index.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IndexesRetrieveResponse
            The specified index has successfully been retrieved.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.indexes.retrieve(
                index_id="index-id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    IndexesRetrieveResponse,
                    parse_obj_as(
                        type_=IndexesRetrieveResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        index_id: str,
        *,
        index_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        This method updates the name of the specified index.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to update.

        index_name : str
            The name of the index.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.indexes.update(
                index_id="index-id",
                index_name="index_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="PUT",
            json={
                "index_name": index_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, index_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        This method deletes the specified index and all the videos within it. This action cannot be undone.

        Parameters
        ----------
        index_id : str
            Unique identifier of the index to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.indexes.delete(
                index_id="index-id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"indexes/{jsonable_encoder(index_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
