# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class IndexesCreateRequestEnginesItem(UniversalBaseModel):
    engine_name: str = pydantic.Field()
    """
    The name of the engine. The following engines are available:
    
    - **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.
    
      - `marengo2.6`
    
    - **Generative**: These engines generate text based on your videos.
    
      - `pegasus1.1`
    
    **NOTE:** You cannot change the engines once the index has been created.
    
    For more details, see the [Video understanding engines](/docs/video-understanding-engines) page.
    """

    engine_options: typing.List[str] = pydantic.Field()
    """
    An array that specifies how the platform will process the videos uploaded to this index. For more details, see the [Engine options](/docs/engine-options) page.
    
    **NOTES:**
    
    - When using the Marengo family of video understanding engines, specify any combination of the available engine options - `visual`, `conversation`, `text_in_video`, and `logo`.
    - When using the Pegasus family of video understanding engines, specify one or both of the following engine options: `visual` and `conversation`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
