# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.text_to_video_search_make_search_request_request_group_by import (
    TextToVideoSearchMakeSearchRequestRequestGroupBy,
)
from ..types.threshold_search import ThresholdSearch
from .types.text_to_video_search_make_search_request_request_sort_option import (
    TextToVideoSearchMakeSearchRequestRequestSortOption,
)
from ..types.conversation_option import ConversationOption
from .types.text_to_video_search_make_search_request_request_filter import (
    TextToVideoSearchMakeSearchRequestRequestFilter,
)
from ..core.request_options import RequestOptions
from .types.text_to_video_search_make_search_request_response import (
    TextToVideoSearchMakeSearchRequestResponse,
)
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.too_many_requests_error import TooManyRequestsError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.text_to_video_search_combined_queries_make_search_request_request_query import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
)
from .types.text_to_video_search_combined_queries_make_search_request_request_conversation_option import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestRequestConversationOption,
)
from .types.text_to_video_search_combined_queries_make_search_request_request_filter import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter,
)
from .types.text_to_video_search_combined_queries_make_search_request_response import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestResponse,
)
from .types.text_to_video_search_search_retrieve_specific_page_response import (
    TextToVideoSearchSearchRetrieveSpecificPageResponse,
)
from ..core.jsonable_encoder import jsonable_encoder
from .types.text_to_video_search_combined_queries_retrieve_specific_page_response import (
    TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse,
)
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TextToVideoSearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def make_search_request(
        self,
        *,
        query: str,
        index_id: str,
        search_options: typing.Sequence[str],
        adjust_confidence_level: typing.Optional[float] = OMIT,
        group_by: typing.Optional[
            TextToVideoSearchMakeSearchRequestRequestGroupBy
        ] = OMIT,
        threshold: typing.Optional[ThresholdSearch] = OMIT,
        sort_option: typing.Optional[
            TextToVideoSearchMakeSearchRequestRequestSortOption
        ] = OMIT,
        operator: typing.Optional[str] = OMIT,
        conversation_option: typing.Optional[ConversationOption] = OMIT,
        page_limit: typing.Optional[int] = OMIT,
        filter: typing.Optional[TextToVideoSearchMakeSearchRequestRequestFilter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchMakeSearchRequestResponse:
        """
        This endpoint will be deprecated. Twelve Labs recommends you use theÂ [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTES**:

        - When you use pagination, you will not be charged for retrieving subsequent pages of results.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        query : str
            Your search query. Note that the platform supports full natural language-based search. The following examples are valid queries: "birds flying near a castle," "sun shining on the water," "chickens on the road," "an officer holding a child's hand.", "crowd cheering in the stadium."


        index_id : str
            The unique identifier of the index to search.


        search_options : typing.Sequence[str]
            An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.

            **NOTES:**
            - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.
            - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.


        adjust_confidence_level : typing.Optional[float]
            This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

            **Min**: 0
            **Max**: 1
            **Default:** 0.5


        group_by : typing.Optional[TextToVideoSearchMakeSearchRequestRequestGroupBy]
            Use this parameter to group or ungroup items in a response. It can take one of the following values:
            - `video`:  The platform will group the matching video clips in the response by video.
            - `clip`: The matching video clips in the response will not be grouped.

            **Default:** `clip`


        threshold : typing.Optional[ThresholdSearch]

        sort_option : typing.Optional[TextToVideoSearchMakeSearchRequestRequestSortOption]
            Use this parameter to specify the sort order for the response.

            When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.

            If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

            If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.


            **Default:** `score`


        operator : typing.Optional[str]
            When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.

              The following logical operators are supported:

              - `or`

              - `and`

              For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.


              **Default**: `or`.


        conversation_option : typing.Optional[ConversationOption]

        page_limit : typing.Optional[int]
            The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page.

            **Max**: `50`.


        filter : typing.Optional[TextToVideoSearchMakeSearchRequestRequestFilter]
            For string fields, the filter `parameter` returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

            For numeric fields, the `filter` parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

            To enable filtering by custom fields:
            1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
            2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.

            For more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchMakeSearchRequestResponse
            Successfully performed a search request.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.text_to_video_search.make_search_request(
            query="query",
            index_id="index_id",
            search_options=["visual", "conversation", "text_in_video", "logo"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "search",
            method="POST",
            json={
                "query": query,
                "index_id": index_id,
                "search_options": search_options,
                "adjust_confidence_level": adjust_confidence_level,
                "group_by": group_by,
                "threshold": threshold,
                "sort_option": sort_option,
                "operator": operator,
                "conversation_option": conversation_option,
                "page_limit": page_limit,
                "filter": convert_and_respect_annotation_metadata(
                    object_=filter,
                    annotation=TextToVideoSearchMakeSearchRequestRequestFilter,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchMakeSearchRequestResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchMakeSearchRequestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def combined_queries_make_search_request(
        self,
        *,
        index_id: str,
        search_options: typing.Sequence[str],
        query: TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
        conversation_option: typing.Optional[
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestConversationOption
        ] = OMIT,
        adjust_confidence_level: typing.Optional[float] = OMIT,
        filter: typing.Optional[
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter
        ] = OMIT,
        page_limit: typing.Optional[float] = OMIT,
        threshold: typing.Optional[ThresholdSearch] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchCombinedQueriesMakeSearchRequestResponse:
        """
        Use this method to search for relevant matches in an index using combined queries.

        For clarity, the combined search feature is documented in this section. However, note that the `/search` endpoint supports all the features of the `/combined-search` endpoint.

        This method returns the first page of results. To retrieve the subsequent pages, you must call the [`GET`](/reference/combined-queries-retrieve-specific-page) method of the `/combined-search/{page-token}` endpoint, passing it the unique identifier of the page you want to retrieve.

        **NOTES**:

        - Twelve Labs Inc. has disabled calling this method from this page to avoid confusion and recommends you invoke it using one of the available [SKDs](/docs/twelve-labs-sdks). See the [Use combined queries](/docs/search-combined-queries) page for details.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        index_id : str
            The unique identifier of the index to search.


        search_options : typing.Sequence[str]
            An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.

            **NOTES:**
            - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.


        query : TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery

            Use the `query` parameter to build combined queries.

            For details about building combined queries, see the [Combined queries](/docs/search-combined-queries) page.


        conversation_option : typing.Optional[TextToVideoSearchCombinedQueriesMakeSearchRequestRequestConversationOption]
            Specifies the type of match the platform will perform. The following values are supported: `semantic` and `exact_match`. For details, see the [Conversation option](/docs/conversation-option) page.

            **Default:** `semantic`


        adjust_confidence_level : typing.Optional[float]
            This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

            **Min**: 0
            **Max**: 1
            **Default:** 0.5


        filter : typing.Optional[TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter]
            Use this parameter to filter your search results by metadata.

            For string fields, the filter parameter returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

            For numeric fields, the filter parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

            To enable filtering by custom fields:
            1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
            2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.


        page_limit : typing.Optional[float]
            The number of items to return on each page.

            **Default**: `10`
            **Max**: `50`


        threshold : typing.Optional[ThresholdSearch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchCombinedQueriesMakeSearchRequestResponse
            Successfully performed a search request.

        Examples
        --------
        from twelvelabs import TwelveLabs
        from twelvelabs.text_to_video_search import (
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
        )

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.text_to_video_search.combined_queries_make_search_request(
            index_id="index_id",
            search_options=["visual", "conversation", "text_in_video", "logo"],
            query=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "search/combined",
            method="POST",
            json={
                "index_id": index_id,
                "search_options": search_options,
                "conversation_option": conversation_option,
                "adjust_confidence_level": adjust_confidence_level,
                "query": convert_and_respect_annotation_metadata(
                    object_=query,
                    annotation=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
                    direction="write",
                ),
                "filter": convert_and_respect_annotation_metadata(
                    object_=filter,
                    annotation=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter,
                    direction="write",
                ),
                "page_limit": page_limit,
                "threshold": threshold,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchCombinedQueriesMakeSearchRequestResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchCombinedQueriesMakeSearchRequestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_retrieve_specific_page(
        self,
        page_token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchSearchRetrieveSpecificPageResponse:
        """
        This endpoint will be deprecated. Twelve Labs recommends you use theÂ [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        page_token : str
            A token that identifies the page to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchSearchRetrieveSpecificPageResponse
            Successfully retrieved the specified page of search results.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.text_to_video_search.search_retrieve_specific_page(
            page_token="page-token",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"search/{jsonable_encoder(page_token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchSearchRetrieveSpecificPageResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchSearchRetrieveSpecificPageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def combined_queries_retrieve_specific_page(
        self,
        page_token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse:
        """
        Use this endpoint to retrieve a specific page of search results.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        page_token : str
            A token that identifies the page to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse
            Successfully performed a search request.

        Examples
        --------
        from twelvelabs import TwelveLabs

        client = TwelveLabs(
            api_key="YOUR_API_KEY",
        )
        client.text_to_video_search.combined_queries_retrieve_specific_page(
            page_token="page-token",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"search/combined/{jsonable_encoder(page_token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTextToVideoSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def make_search_request(
        self,
        *,
        query: str,
        index_id: str,
        search_options: typing.Sequence[str],
        adjust_confidence_level: typing.Optional[float] = OMIT,
        group_by: typing.Optional[
            TextToVideoSearchMakeSearchRequestRequestGroupBy
        ] = OMIT,
        threshold: typing.Optional[ThresholdSearch] = OMIT,
        sort_option: typing.Optional[
            TextToVideoSearchMakeSearchRequestRequestSortOption
        ] = OMIT,
        operator: typing.Optional[str] = OMIT,
        conversation_option: typing.Optional[ConversationOption] = OMIT,
        page_limit: typing.Optional[int] = OMIT,
        filter: typing.Optional[TextToVideoSearchMakeSearchRequestRequestFilter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchMakeSearchRequestResponse:
        """
        This endpoint will be deprecated. Twelve Labs recommends you use theÂ [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTES**:

        - When you use pagination, you will not be charged for retrieving subsequent pages of results.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

        Parameters
        ----------
        query : str
            Your search query. Note that the platform supports full natural language-based search. The following examples are valid queries: "birds flying near a castle," "sun shining on the water," "chickens on the road," "an officer holding a child's hand.", "crowd cheering in the stadium."


        index_id : str
            The unique identifier of the index to search.


        search_options : typing.Sequence[str]
            An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.

            **NOTES:**
            - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.
            - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.


        adjust_confidence_level : typing.Optional[float]
            This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

            **Min**: 0
            **Max**: 1
            **Default:** 0.5


        group_by : typing.Optional[TextToVideoSearchMakeSearchRequestRequestGroupBy]
            Use this parameter to group or ungroup items in a response. It can take one of the following values:
            - `video`:  The platform will group the matching video clips in the response by video.
            - `clip`: The matching video clips in the response will not be grouped.

            **Default:** `clip`


        threshold : typing.Optional[ThresholdSearch]

        sort_option : typing.Optional[TextToVideoSearchMakeSearchRequestRequestSortOption]
            Use this parameter to specify the sort order for the response.

            When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.

            If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

            If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.


            **Default:** `score`


        operator : typing.Optional[str]
            When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.

              The following logical operators are supported:

              - `or`

              - `and`

              For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.


              **Default**: `or`.


        conversation_option : typing.Optional[ConversationOption]

        page_limit : typing.Optional[int]
            The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page.

            **Max**: `50`.


        filter : typing.Optional[TextToVideoSearchMakeSearchRequestRequestFilter]
            For string fields, the filter `parameter` returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

            For numeric fields, the `filter` parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

            To enable filtering by custom fields:
            1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
            2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.

            For more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchMakeSearchRequestResponse
            Successfully performed a search request.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_video_search.make_search_request(
                query="query",
                index_id="index_id",
                search_options=["visual", "conversation", "text_in_video", "logo"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "search",
            method="POST",
            json={
                "query": query,
                "index_id": index_id,
                "search_options": search_options,
                "adjust_confidence_level": adjust_confidence_level,
                "group_by": group_by,
                "threshold": threshold,
                "sort_option": sort_option,
                "operator": operator,
                "conversation_option": conversation_option,
                "page_limit": page_limit,
                "filter": convert_and_respect_annotation_metadata(
                    object_=filter,
                    annotation=TextToVideoSearchMakeSearchRequestRequestFilter,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchMakeSearchRequestResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchMakeSearchRequestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def combined_queries_make_search_request(
        self,
        *,
        index_id: str,
        search_options: typing.Sequence[str],
        query: TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
        conversation_option: typing.Optional[
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestConversationOption
        ] = OMIT,
        adjust_confidence_level: typing.Optional[float] = OMIT,
        filter: typing.Optional[
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter
        ] = OMIT,
        page_limit: typing.Optional[float] = OMIT,
        threshold: typing.Optional[ThresholdSearch] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchCombinedQueriesMakeSearchRequestResponse:
        """
        Use this method to search for relevant matches in an index using combined queries.

        For clarity, the combined search feature is documented in this section. However, note that the `/search` endpoint supports all the features of the `/combined-search` endpoint.

        This method returns the first page of results. To retrieve the subsequent pages, you must call the [`GET`](/reference/combined-queries-retrieve-specific-page) method of the `/combined-search/{page-token}` endpoint, passing it the unique identifier of the page you want to retrieve.

        **NOTES**:

        - Twelve Labs Inc. has disabled calling this method from this page to avoid confusion and recommends you invoke it using one of the available [SKDs](/docs/twelve-labs-sdks). See the [Use combined queries](/docs/search-combined-queries) page for details.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        index_id : str
            The unique identifier of the index to search.


        search_options : typing.Sequence[str]
            An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.

            **NOTES:**
            - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.


        query : TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery

            Use the `query` parameter to build combined queries.

            For details about building combined queries, see the [Combined queries](/docs/search-combined-queries) page.


        conversation_option : typing.Optional[TextToVideoSearchCombinedQueriesMakeSearchRequestRequestConversationOption]
            Specifies the type of match the platform will perform. The following values are supported: `semantic` and `exact_match`. For details, see the [Conversation option](/docs/conversation-option) page.

            **Default:** `semantic`


        adjust_confidence_level : typing.Optional[float]
            This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

            **Min**: 0
            **Max**: 1
            **Default:** 0.5


        filter : typing.Optional[TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter]
            Use this parameter to filter your search results by metadata.

            For string fields, the filter parameter returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

            For numeric fields, the filter parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

            To enable filtering by custom fields:
            1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
            2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.


        page_limit : typing.Optional[float]
            The number of items to return on each page.

            **Default**: `10`
            **Max**: `50`


        threshold : typing.Optional[ThresholdSearch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchCombinedQueriesMakeSearchRequestResponse
            Successfully performed a search request.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs
        from twelvelabs.text_to_video_search import (
            TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
        )

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_video_search.combined_queries_make_search_request(
                index_id="index_id",
                search_options=["visual", "conversation", "text_in_video", "logo"],
                query=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery(),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "search/combined",
            method="POST",
            json={
                "index_id": index_id,
                "search_options": search_options,
                "conversation_option": conversation_option,
                "adjust_confidence_level": adjust_confidence_level,
                "query": convert_and_respect_annotation_metadata(
                    object_=query,
                    annotation=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery,
                    direction="write",
                ),
                "filter": convert_and_respect_annotation_metadata(
                    object_=filter,
                    annotation=TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter,
                    direction="write",
                ),
                "page_limit": page_limit,
                "threshold": threshold,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchCombinedQueriesMakeSearchRequestResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchCombinedQueriesMakeSearchRequestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_retrieve_specific_page(
        self,
        page_token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchSearchRetrieveSpecificPageResponse:
        """
        This endpoint will be deprecated. Twelve Labs recommends you use theÂ [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        page_token : str
            A token that identifies the page to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchSearchRetrieveSpecificPageResponse
            Successfully retrieved the specified page of search results.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_video_search.search_retrieve_specific_page(
                page_token="page-token",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"search/{jsonable_encoder(page_token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchSearchRetrieveSpecificPageResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchSearchRetrieveSpecificPageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def combined_queries_retrieve_specific_page(
        self,
        page_token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse:
        """
        Use this endpoint to retrieve a specific page of search results.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.

        Parameters
        ----------
        page_token : str
            A token that identifies the page to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse
            Successfully performed a search request.

        Examples
        --------
        import asyncio

        from twelvelabs import AsyncTwelveLabs

        client = AsyncTwelveLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.text_to_video_search.combined_queries_retrieve_specific_page(
                page_token="page-token",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"search/combined/{jsonable_encoder(page_token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse,
                    parse_obj_as(
                        type_=TextToVideoSearchCombinedQueriesRetrieveSpecificPageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
