# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .text_to_video_search_combined_queries_make_search_request_request_filter_duration import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilterDuration,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilter(
    UniversalBaseModel
):
    """
    Use this parameter to filter your search results by metadata.

    For string fields, the filter parameter returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

    For numeric fields, the filter parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

    To enable filtering by custom fields:

    1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
    2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.
    """

    id: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    An array of strings that filters your search results based on the specified video IDs.
    """

    duration: typing.Optional[
        TextToVideoSearchCombinedQueriesMakeSearchRequestRequestFilterDuration
    ] = pydantic.Field(default=None)
    """
    This field filters your search results based on the duration of the video containing the segment that matches your query.
    
    The following example filters search results to include only the segments from videos with a duration greater than or equal to 600 seconds and less than or equal to 800 seconds:
    
    ```
    "duration": {
      "gte": 600,
      "lte": 800
    }
    ```
    """

    width: typing.Optional[float] = pydantic.Field(default=None)
    """
    A numeric field that filters your search results based on width.
    """

    height: typing.Optional[float] = pydantic.Field(default=None)
    """
    A numeric field that filters your search results based on height.
    """

    size: typing.Optional[float] = pydantic.Field(default=None)
    """
    A numeric field that filters your search results based on size, expressed in bytes.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string field that filters your search results based on the title of the video.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
