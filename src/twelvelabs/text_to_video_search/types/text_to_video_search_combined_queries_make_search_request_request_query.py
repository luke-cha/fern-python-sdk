# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .text_to_video_search_combined_queries_make_search_request_request_query_conversation_option import (
    TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQueryConversationOption,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQuery(UniversalBaseModel):
    """
    Use the `query` parameter to build combined queries.

    For details about building combined queries, see the [Combined queries](/docs/search-combined-queries) page.
    """

    text: typing.Optional[str] = pydantic.Field(default=None)
    """
    Your search query. Note that the platform supports full natural language-based search. The following examples are valid queries: "birds flying near a castle," "sun shining on the water," "chickens on the road," "an officer holding a child's hand.", "crowd cheering in the stadium."
    """

    search_options: typing.Optional[typing.List[typing.Optional[typing.Any]]] = (
        pydantic.Field(default=None)
    )
    """
    If set, overrides the search options for this query.
    """

    conversation_option: typing.Optional[
        TextToVideoSearchCombinedQueriesMakeSearchRequestRequestQueryConversationOption
    ] = pydantic.Field(default=None)
    """
    If set, overrides the conversation option for this query.
    """

    proximity: typing.Optional[float] = pydantic.Field(default=None)
    """
    When specifying multiple search queries, you can use the `proximity` parameter to limit or expand your search results by extending the lower and upper boundaries of each subquery. This parameter is expressed in seconds.
    
    **Example:**
    You've specified two queries and used to `AND` logical operator to retrieve only the video clip for which both queries match. The first query matches a video clip that starts at 10s and end at 30s. The second query second query matches a video clip that starts at 50s and ends at 60s.
    
    If you don't specify the `proximity` parameter, then it takes the default value of 0s. The video clip will not overlap, and the platform will not return any results.
    
    If you specify a value of 20s for the `proximity` parameter, the first video clip will start at 0s and end at 50s, and the second video clip will start at 30s and end at 80s. The video clips will overlap, and the platform will return a result that starts 30s and ends at 50s.
    
    **Default**: `0`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
