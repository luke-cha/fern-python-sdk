# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Engine(UniversalBaseModel):
    """
    Engine object
    """

    id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="_id")
    ] = pydantic.Field(default=None)
    """
    A string representing the identifier of the engine.
    """

    allowed_engine_options: typing.Optional[typing.List[str]] = pydantic.Field(
        default=None
    )
    """
    An array of strings representing the supported engine options for each engine. For details, see the [Engine options](/docs/engine-options) page.
    """

    author: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating who created the index.
    """

    created_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the engine was created.
    """

    updated_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the engine was updated.
    """

    finetune: typing.Optional[bool] = pydantic.Field(default=None)
    """
    A boolean indicating whether this engine supports fine-tunning.
    """

    ready: typing.Optional[bool] = pydantic.Field(default=None)
    """
    A boolean specifying whether this engine is ready to be used.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
