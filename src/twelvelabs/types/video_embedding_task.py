# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .video_embedding_task_video_embeddings_item import (
    VideoEmbeddingTaskVideoEmbeddingsItem,
)
from .video_embedding_task_metadata import VideoEmbeddingTaskMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class VideoEmbeddingTask(UniversalBaseModel):
    id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="_id")
    ] = pydantic.Field(default=None)
    """
    The unique identifier of the video embedding task.
    """

    engine_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the engine the platform uses to create the embeddings.
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
    """

    video_embeddings: typing.Optional[
        typing.List[VideoEmbeddingTaskVideoEmbeddingsItem]
    ] = pydantic.Field(default=None)
    """
    An array of objects containing your embeddings.
    """

    metadata: typing.Optional[VideoEmbeddingTaskMetadata] = pydantic.Field(default=None)
    """
    An object containing metadata about the video.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
