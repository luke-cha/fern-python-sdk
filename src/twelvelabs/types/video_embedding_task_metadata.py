# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .video_embedding_task_metadata_video_embedding_scope_item import (
    VideoEmbeddingTaskMetadataVideoEmbeddingScopeItem,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class VideoEmbeddingTaskMetadata(UniversalBaseModel):
    """
    An object containing metadata about the video.
    """

    video_filename: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the video file. The platform returns this field when you upload a video from your local file system.
    """

    video_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL.
    """

    video_clip_length: typing.Optional[float] = pydantic.Field(default=None)
    """
    The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
    """

    video_embedding_scope: typing.Optional[
        typing.List[VideoEmbeddingTaskMetadataVideoEmbeddingScopeItem]
    ] = pydantic.Field(default=None)
    """
    The scope of the video embedding. It can contain one or both of the following values: `clip` and `video`.
    """

    duration: typing.Optional[float] = pydantic.Field(default=None)
    """
    The total duration of the video in seconds.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
