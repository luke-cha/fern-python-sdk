# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .video_indexing_task_metadata import VideoIndexingTaskMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class VideoIndexingTask(UniversalBaseModel):
    id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="_id")
    ] = pydantic.Field(default=None)
    """
    A string representing the unique identifier of the task. It is assigned by the platform when a new task is created.
    """

    created_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task was created.
    """

    updated_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating the status of the video indexing task. See the [Tasks](/reference/tasks) page for a list of possible statuses.
    """

    estimated_time: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string indicating the estimated completion date and time of the video indexing task, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").
    """

    index_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string representing the unique identifier of the index to which the video must be uploaded.
    """

    metadata: typing.Optional[VideoIndexingTaskMetadata] = pydantic.Field(default=None)
    """
    An object that contains information about the video.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
