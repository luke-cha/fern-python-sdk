# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class VideoIndexingTaskGetByStatusResponse(UniversalBaseModel):
    index_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The unique identifier of the index.
    """

    ready: typing.Optional[int] = pydantic.Field(default=None)
    """
    A value indicating the number of video indexing tasks for which the status is `ready`.
    """

    validating: typing.Optional[int] = pydantic.Field(default=None)
    """
    A value indicating the number of video indexing tasks for which the status is `validating`.
    """

    pending: typing.Optional[int] = pydantic.Field(default=None)
    """
    A value indicating the number of video indexing tasks for which the status is `pending`.
    """

    failed: typing.Optional[int] = pydantic.Field(default=None)
    """
    A value indicating the number of video indexing tasks for which the status is `failed`.
    """

    total_result: typing.Optional[int] = pydantic.Field(default=None)
    """
    A value indicating the total number of video indexing tasks in the specified index.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
